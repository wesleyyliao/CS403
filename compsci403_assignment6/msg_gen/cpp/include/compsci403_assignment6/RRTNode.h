/* Auto-generated by genmsg_cpp for file /home/wyliao/Desktop/compsci403_assignment6/msg/RRTNode.msg */
#ifndef COMPSCI403_ASSIGNMENT6_MESSAGE_RRTNODE_H
#define COMPSCI403_ASSIGNMENT6_MESSAGE_RRTNODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace compsci403_assignment6
{
template <class ContainerAllocator>
struct RRTNode_ {
  typedef RRTNode_<ContainerAllocator> Type;

  RRTNode_()
  : location()
  , parent(0)
  {
  }

  RRTNode_(const ContainerAllocator& _alloc)
  : location(_alloc)
  , parent(0)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _location_type;
   ::geometry_msgs::Point_<ContainerAllocator>  location;

  typedef int32_t _parent_type;
  int32_t parent;


  typedef boost::shared_ptr< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::compsci403_assignment6::RRTNode_<ContainerAllocator>  const> ConstPtr;
}; // struct RRTNode
typedef  ::compsci403_assignment6::RRTNode_<std::allocator<void> > RRTNode;

typedef boost::shared_ptr< ::compsci403_assignment6::RRTNode> RRTNodePtr;
typedef boost::shared_ptr< ::compsci403_assignment6::RRTNode const> RRTNodeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::compsci403_assignment6::RRTNode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::compsci403_assignment6::RRTNode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace compsci403_assignment6

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment6::RRTNode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b537b82f1208ce6fb70806424f02548b";
  }

  static const char* value(const  ::compsci403_assignment6::RRTNode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb537b82f1208ce6fULL;
  static const uint64_t static_value2 = 0xb70806424f02548bULL;
};

template<class ContainerAllocator>
struct DataType< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "compsci403_assignment6/RRTNode";
  }

  static const char* value(const  ::compsci403_assignment6::RRTNode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Location of the tree node.\n\
geometry_msgs/Point location\n\
\n\
# Index of parent node, -1 if there is no parent (root node).\n\
int32 parent\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::compsci403_assignment6::RRTNode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::compsci403_assignment6::RRTNode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::compsci403_assignment6::RRTNode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.location);
    stream.next(m.parent);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RRTNode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::compsci403_assignment6::RRTNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::compsci403_assignment6::RRTNode_<ContainerAllocator> & v) 
  {
    s << indent << "location: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "parent: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parent);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COMPSCI403_ASSIGNMENT6_MESSAGE_RRTNODE_H

