/* Auto-generated by genmsg_cpp for file /home/wyliao/Desktop/compsci403_assignment4/srv/GetFreePathSrv.srv */
#ifndef COMPSCI403_ASSIGNMENT4_SERVICE_GETFREEPATHSRV_H
#define COMPSCI403_ASSIGNMENT4_SERVICE_GETFREEPATHSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/LaserScan.h"



namespace compsci403_assignment4
{
template <class ContainerAllocator>
struct GetFreePathSrvRequest_ {
  typedef GetFreePathSrvRequest_<ContainerAllocator> Type;

  GetFreePathSrvRequest_()
  : laser_scan()
  , v(0.0)
  , w(0.0)
  {
  }

  GetFreePathSrvRequest_(const ContainerAllocator& _alloc)
  : laser_scan(_alloc)
  , v(0.0)
  , w(0.0)
  {
  }

  typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _laser_scan_type;
   ::sensor_msgs::LaserScan_<ContainerAllocator>  laser_scan;

  typedef float _v_type;
  float v;

  typedef float _w_type;
  float w;


  typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetFreePathSrvRequest
typedef  ::compsci403_assignment4::GetFreePathSrvRequest_<std::allocator<void> > GetFreePathSrvRequest;

typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvRequest> GetFreePathSrvRequestPtr;
typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvRequest const> GetFreePathSrvRequestConstPtr;



template <class ContainerAllocator>
struct GetFreePathSrvResponse_ {
  typedef GetFreePathSrvResponse_<ContainerAllocator> Type;

  GetFreePathSrvResponse_()
  : is_obstacle(false)
  , free_path_length(0.0)
  {
  }

  GetFreePathSrvResponse_(const ContainerAllocator& _alloc)
  : is_obstacle(false)
  , free_path_length(0.0)
  {
  }

  typedef uint8_t _is_obstacle_type;
  uint8_t is_obstacle;

  typedef float _free_path_length_type;
  float free_path_length;


  typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetFreePathSrvResponse
typedef  ::compsci403_assignment4::GetFreePathSrvResponse_<std::allocator<void> > GetFreePathSrvResponse;

typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvResponse> GetFreePathSrvResponsePtr;
typedef boost::shared_ptr< ::compsci403_assignment4::GetFreePathSrvResponse const> GetFreePathSrvResponseConstPtr;


struct GetFreePathSrv
{

typedef GetFreePathSrvRequest Request;
typedef GetFreePathSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetFreePathSrv
} // namespace compsci403_assignment4

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9990b3cde2866f776c81e00c9e086a37";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9990b3cde2866f77ULL;
  static const uint64_t static_value2 = 0x6c81e00c9e086a37ULL;
};

template<class ContainerAllocator>
struct DataType< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "compsci403_assignment4/GetFreePathSrvRequest";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/LaserScan laser_scan\n\
float32 v\n\
float32 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79c5379529f76e6a7f5e100191a058dd";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x79c5379529f76e6aULL;
  static const uint64_t static_value2 = 0x7f5e100191a058ddULL;
};

template<class ContainerAllocator>
struct DataType< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "compsci403_assignment4/GetFreePathSrvResponse";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool is_obstacle\n\
float32 free_path_length\n\
\n\
\n\
";
  }

  static const char* value(const  ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.laser_scan);
    stream.next(m.v);
    stream.next(m.w);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetFreePathSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.is_obstacle);
    stream.next(m.free_path_length);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct GetFreePathSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<compsci403_assignment4::GetFreePathSrv> {
  static const char* value() 
  {
    return "4dbf2c0b49713b0f6d232f2c3eb14392";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrv&) { return value(); } 
};

template<>
struct DataType<compsci403_assignment4::GetFreePathSrv> {
  static const char* value() 
  {
    return "compsci403_assignment4/GetFreePathSrv";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dbf2c0b49713b0f6d232f2c3eb14392";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "compsci403_assignment4/GetFreePathSrv";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dbf2c0b49713b0f6d232f2c3eb14392";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "compsci403_assignment4/GetFreePathSrv";
  }

  static const char* value(const compsci403_assignment4::GetFreePathSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COMPSCI403_ASSIGNMENT4_SERVICE_GETFREEPATHSRV_H

